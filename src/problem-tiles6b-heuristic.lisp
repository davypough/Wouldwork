;;; Filename: problem-tiles6b-heuristic.lisp

;;; List problem specification for a blue/yellow tile shuffle in Islands of Insight.
;;; Uses multiple rules, one for each tile type (shape)

(in-package :ww)  ;required

(ww-set *problem* tiles6b-heuristic)

(ww-set *solution-type* min-length)

(ww-set *tree-or-graph* graph)

(ww-set *depth-cutoff* 60)

(ww-set *progress-reporting-interval* 500000)


(define-types
  GUN-tile (GUN1)
  CANE-tile (CANE1)
  VER-tile (VER1 VER2)
  UP-tile (UP1)
  L-tile (L1)
  Y-tile (Y1)
  tile   (either GUN-tile CANE-tile VER-tile UP-tile L-tile Y-tile))  ;Y is yellow


(define-dynamic-relations
  (loc tile $fixnum $fixnum)  ;location of a tile with coordinates
  (emptys $list))


(define-static-relations
  (Y1-goal $fixnum $fixnum))  ;the ref coord of the goal location


(define-query heuristic? ()
  ;Get the manhattan distance from first coord of Y tile to the goal coord. Lower is better.
  (do (bind (loc Y1 $Y1-row $Y1-col))
      (bind (Y1-goal $Y1-goal-row $Y1-goal-col))
      (+ (abs (- $Y1-row $Y1-goal-row))
         (abs (- $Y1-col $Y1-goal-col)))))


(defun check-coord (new-row new-col)
  (when (and (<= 0 new-row 6)
             (<= 0 new-col 7))
    (cons new-row new-col)))


(defun sort-coords (coords)
  "Keeps coordinates lexicographically sorted."
  (sort coords (lambda (a b)
                 (or (< (car a) (car b))
                     (and (= (car a) (car b))
                          (< (cdr a) (cdr b)))))))


;------------------ Action Rules ------------------

(define-action move-L  ;move L-tile
  1
  (?tile L-tile)
  (always-true)
  (?tile $direction)
  (do (bind (loc ?tile $row $col))
      (bind (emptys $emptys))
      (if (and (setq $empty1-coord (check-coord $row (+ $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (+ $col 2)))
               (member $empty2-coord $emptys :test #'equal))
        (assert (setq $direction 'right)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (+ $col 1))))
      (if (and (setq $empty1-coord (check-coord $row (- $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (- $col 1)))
               (member $empty2-coord $emptys :test #'equal))
        (assert (setq $direction 'left)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) (+ $col 1)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (- $col 1))))
      (if (and (setq $empty1-coord (check-coord (+ $row 2) $col))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 2) (+ $col 1)))
               (member $empty2-coord $emptys :test #'equal))
        (assert (setq $direction 'down)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) (+ $col 1)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (+ $row 1) $col)))
      (if (and (setq $empty1-coord (check-coord $row (+ $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (- $row 1) $col))
               (member $empty2-coord $emptys :test #'equal))
        (assert (setq $direction 'up)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons (+ $row 1) $col) $new-emptys)
                (push (cons (+ $row 1) (+ $col 1)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (- $row 1) $col)))))


(define-action move-GUN
  1
  (?tile GUN-tile)
  (always-true)
  (?tile $direction)
  (do (bind (loc ?tile $row $col))
      (bind (emptys $emptys))
      (if (and (setq $empty1-coord (check-coord $row (+ $col 3)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (+ $col 2)))
               (member $empty2-coord $emptys :test #'equal)
               (setq $empty3-coord (check-coord (+ $row 2) (+ $col 1)))
               (member $empty3-coord $emptys :test #'equal))
        (assert (setq $direction 'right)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) $col) $new-emptys)
                (push (cons (+ $row 2) $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (+ $col 1))))
      (if (and (setq $empty1-coord (check-coord $row (- $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (- $col 1)))
               (member $empty2-coord $emptys :test #'equal)
               (setq $empty3-coord (check-coord (+ $row 2) (- $col 1)))
               (member $empty3-coord $emptys :test #'equal))
        (assert (setq $direction 'left)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (push (cons $row (+ $col 2)) $new-emptys)
                (push (cons (+ $row 1) (+ $col 1)) $new-emptys)
                (push (cons (+ $row 2) $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (- $col 1))))
      (if (and (setq $empty1-coord (check-coord (+ $row 1) (+ $col 2)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 3) $col))
               (member $empty2-coord $emptys :test #'equal)
               (setq $empty3-coord (check-coord (+ $row 2) (+ $col 1)))
               (member $empty3-coord $emptys :test #'equal))
        (assert (setq $direction 'down)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons $row (+ $col 1)) $new-emptys)
                (push (cons $row (+ $col 2)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (+ $row 1) $col)))
      (if (and (setq $empty1-coord (check-coord (- $row 1) (+ $col 2)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (- $row 1) $col))
               (member $empty2-coord $emptys :test #'equal)
               (setq $empty3-coord (check-coord (- $row 1) (+ $col 1)))
               (member $empty3-coord $emptys :test #'equal))
        (assert (setq $direction 'up)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (push (cons $row (+ $col 2)) $new-emptys)
                (push (cons (+ $row 2) $col) $new-emptys)
                (push (cons (+ $row 1) (+ $col 1)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (- $row 1) $col)))))


(define-action move-CANE
  1
  (?tile CANE-tile)
  (always-true)
  (?tile $direction)
  (do (bind (loc ?tile $row $col))
      (bind (emptys $emptys))
      (if (and (setq $empty1-coord (check-coord $row (+ $col 2)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (+ $col 1)))
               (member $empty2-coord $emptys :test #'equal)
               (setq $empty3-coord (check-coord (+ $row 2) (+ $col 1)))
               (member $empty3-coord $emptys :test #'equal))
        (assert (setq $direction 'right)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) $col) $new-emptys)
                (push (cons (+ $row 2) $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (+ $col 1))))
      (if (and (setq $empty1-coord (check-coord $row (- $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (- $col 1)))
               (member $empty2-coord $emptys :test #'equal)
               (setq $empty3-coord (check-coord (+ $row 2) (- $col 1)))
               (member $empty3-coord $emptys :test #'equal))
        (assert (setq $direction 'left)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (push (cons $row (+ $col 1)) $new-emptys)
                (push (cons (+ $row 1) $col) $new-emptys)
                (push (cons (+ $row 2) $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (- $col 1))))
      (if (and (setq $empty1-coord (check-coord (+ $row 1) (+ $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 3) $col))
               (member $empty2-coord $emptys :test #'equal))
        (assert (setq $direction 'down)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons $row (+ $col 1)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (+ $row 1) $col)))
      (if (and (setq $empty1-coord (check-coord (- $row 1) (+ $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (- $row 1) $col))
               (member $empty2-coord $emptys :test #'equal))
        (assert (setq $direction 'up)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons $row (+ $col 1)) $new-emptys)
                (push (cons (+ $row 2) $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (- $row 1) $col)))))


(define-action move-UP
  1
  (?tile UP-tile)
  (always-true)
  (?tile $direction)
  (do (bind (loc ?tile $row $col))
      (bind (emptys $emptys))
      (if (and (setq $empty1-coord (check-coord $row (+ $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (+ $col 3)))
               (member $empty2-coord $emptys :test #'equal)
        (assert (setq $direction 'right)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) (- $col 1)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (+ $col 1))))
      (if (and (setq $empty1-coord (check-coord $row (- $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (- $col 2)))
               (member $empty2-coord $emptys :test #'equal))
        (assert (setq $direction 'left)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) (+ $col 2)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (- $col 1))))
      (if (and (setq $empty1-coord (check-coord (+ $row 2) (+ $col 2))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 2) $col))
               (member $empty2-coord $emptys :test #'equal)
               (setq $empty3-coord (check-coord (+ $row 2) (- $col 1)))
               (member $empty3-coord $emptys :test #'equal)
               (setq $empty4-coord (check-coord (+ $row 2) (+ $col 1)))
               (member $empty4-coord $emptys :test #'equal))
        (assert (setq $direction 'down)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty4-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) (- $col 1)) $new-emptys)
                (push (cons (+ $row 1) (+ $col 1)) $new-emptys)
                (push (cons (+ $row 1) (+ $col 2)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (+ $row 1) $col)))
      (if (and (setq $empty1-coord (check-coord $row (- $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (- $row 1) $col))
               (member $empty2-coord $emptys :test #'equal))
               (setq $empty3-coord (check-coord $row (+ $col 1)))
               (member $empty3-coord $emptys :test #'equal))
               (setq $empty4-coord (check-coord $row (+ $col 2)))
               (member $empty4-coord $emptys :test #'equal))
        (assert (setq $direction 'up)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty4-coord :test #'equal)
                (push (cons (+ $row 1) (- $col 1)) $new-emptys)
                (push (cons (+ $row 1) $col) $new-emptys)
                (push (cons (+ $row 1) (+ $col 1)) $new-emptys)
                (push (cons (+ $row 1) (+ $col 2)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (- $row 1) $col)))))


(define-action move-VER
  1
  (?tile VER-tile)
  (always-true)
  (?tile $direction)
  (do (bind (loc ?tile $row $col))
      (bind (emptys $emptys))
      (if (and (setq $empty1-coord (check-coord $row (+ $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (+ $col 1)))
               (member $empty2-coord $emptys :test #'equal)
               (setq $empty3-coord (check-coord (+ $row 2) (+ $col 1)))
               (member $empty3-coord $emptys :test #'equal))
        (assert (setq $direction 'right)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) $col) $new-emptys)
                (push (cons (+ $row 2) $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (+ $col 1))))
      (if (and (setq $empty1-coord (check-coord $row (- $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (- $col 1)))
               (member $empty2-coord $emptys :test #'equal)
               (setq $empty3-coord (check-coord (+ $row 2) (- $col 1)))
               (member $empty3-coord $emptys :test #'equal))
        (assert (setq $direction 'left)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty3-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons (+ $row 1) $col) $new-emptys)
                (push (cons (+ $row 2) $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (- $col 1))))
      (if (and (setq $empty1-coord (check-coord (+ $row 3) $col))
               (member $empty1-coord $emptys :test #'equal))
        (assert (setq $direction 'down)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (+ $row 1) $col)))
      (if (and (setq $empty1-coord (check-coord (- $row 1) $col))
               (member $empty1-coord $emptys :test #'equal))
        (assert (setq $direction 'up)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (push (cons (+ $row 2) $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (- $row 1) $col)))))


(define-action move-Y
  1
  (?tile Y-tile)
  (always-true)
  (?tile $direction)
  (do (bind (loc ?tile $row $col))
      (bind (emptys $emptys))
      (if (and (setq $empty1-coord (check-coord $row (+ $col 2)))
               (member $empty1-coord $emptys :test #'equal))
        (assert (setq $direction 'right)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (+ $col 1))))
      (if (and (setq $empty1-coord (check-coord $row (- $col 1)))
               (member $empty1-coord $emptys :test #'equal))
        (assert (setq $direction 'left)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (push (cons $row (+ $col 1)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile $row (- $col 1))))
      (if (and (setq $empty1-coord (check-coord (+ $row 1) $col))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (+ $row 1) (+ $col 1)))
               (member $empty2-coord $emptys :test #'equal))
        (assert (setq $direction 'down)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons $row (+ $col 1)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (+ $row 1) $col)))
      (if (and (setq $empty1-coord (check-coord (- $row 1) (+ $col 1)))
               (member $empty1-coord $emptys :test #'equal)
               (setq $empty2-coord (check-coord (- $row 1) $col))
               (member $empty2-coord $emptys :test #'equal))
        (assert (setq $direction 'up)
                (setq $new-emptys (copy-list $emptys))
                (alexandria:deletef $new-emptys $empty1-coord :test #'equal)
                (alexandria:deletef $new-emptys $empty2-coord :test #'equal)
                (push (cons $row $col) $new-emptys)
                (push (cons $row (+ $col 1)) $new-emptys)
                (emptys (sort-coords $new-emptys))
                (loc ?tile (- $row 1) $col)))))


(define-init
  (loc GUN1 0 0)
  (loc CANE1 1 2)
  (loc VER1 3 0)
  (loc VER2 2 1)
  (loc UP1 5 1)
  (loc L1 4 2)
  (loc Y1 6 6)
  (emptys ((0 . 3) (0 . 4) (0 . 5) (0 . 6) (0 . 7) (1 . 4) (1 . 5) (1 . 6) (1 . 7) (2 . 3) (2 . 7)
           (3 . 3) (3 . 7) (4 . 3) (4 . 7) (5 . 4) (5 . 5) (5 . 6) (5 . 7) (6 . 4) (6 . 5)))
  (Y1-goal 0 6))


(define-goal
  (loc Y1 0 6))
